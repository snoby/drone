
DRONE_RPC_HOST={{ drone_rpc_host }}

{% if drone_server_connection_protocol is defined %}
DRONE_RPC_PROTO={{ drone_server_connection_protocol  }}
{% elif drone_server_proto is defined %}
DRONE_RPC_PROTO={{drone_server_proto  }}
{% endif %}
DRONE_RPC_SECRET={{ drone_rpc_secret }}
DRONE_RUNNER_CAPACITY={{ drone_runner_capacity }}
{% if drone_logs_debug is defined %}
DRONE_LOGS_DEBUG=true
{% endif %}
{% if drone_logs_trace is defined %}
DRONE_LOGS_TRACE=true
{% endif %}
{% if drone_logs_nocolor is defined %}
DRONE_LOGS_NOCOLOR=true
{% endif %}
{% if drone_logs_pretty is defined %}
DRONE_LOGS_PRETTY=true
{% endif %}
{% if drone_logs_text is defined %}
DRONE_LOGS_TEXT=true
{% endif %}
{% if drone_runner_name is defined %}
DRONE_RUNNER_NAME={{ drone_runner_name }}
{% endif %}
{% if drone_docker_config is defined %}
DRONE_DOCKER_CONFIG={{ drone_docker_config }}
{% endif %}
{% if drone_secret_endpoint is defined %}
DRONE_SECRET_PLUGIN_ENDPOINT={{ drone_secret_endpoint }}
DRONE_SECRET_PLUGIN_TOKEN={{ drone_secret_secret }}
DRONE_SECRET_SKIP_VERIFY={{ drone_secret_skip_verify }}
{% endif %}
{% if drone_registry_endpoint is defined %}
DRONE_REGISTRY_ENDPOINT={{ drone_registry_endpoint }}
DRONE_REGISTRY_SECRET={{ drone_registry_secret }}
DRONE_REGISTRY_SKIP_VERIFY={{ drone_registry_skip_verify }}
{% endif %}
{% if drone_runner_volumes is defined %}
DRONE_RUNNER_VOLUMES={{ drone_runner_volumes }}
{% endif %}
{% if drone_runner_os is defined %}
DRONE_RUNNER_OS={{ drone_runner_os }}
{% endif %}
{% if drone_runner_arch is defined %}
DRONE_RUNNER_ARCH={{ drone_runner_arch }}
{% endif %}
{% if drone_runner_kernel is defined %}
DRONE_RUNNER_KERNEL={{ drone_runner_kernel }}
{% endif %}
{% if drone_runner_variant is defined %}
DRONE_RUNNER_VARIANT={{ drone_runner_variant }}
{% endif %}
{% if drone_runner_labels is defined %}
DRONE_RUNNER_LABELS={{ drone_runner_labels }}
{% endif %}
{% if drone_runner_devices is defined %}
DRONE_RUNNER_DEVICES={{ drone_runner_devices }}
{% endif %}
{% if drone_runner_environ is defined %}
DRONE_RUNNER_ENVIRON={{ drone_runner_environ }}
{% endif %}
{% if drone_runner_privileged_images is defined %}
DRONE_RUNNER_PRIVILEGED_IMAGES={{ drone_runner_privileged_images }}
{% endif %}

DRONE_SECRET_PLUGIN_TOKEN={{ drone_secret_plugin }}


#
# We need to expose this runner  to the reverse proxy, but market it as internal only
# host name must be in dns
{% if drone_runner_virtual_hosting is defined %}
DRONE_SECRET_PLUGIN_ENDPOINT=http://{{ drone_plugin_vault_container_name }}.{{domain_name}}
NETWORK_ACCESS=internal
VIRTUAL_HOST={{ drone_runner_name }}.{{ domain_name }}
VIRTUAL_PORT=3000
VIRTUAL_PROTOCOL=http
{% else %}
DRONE_SECRET_PLUGIN_ENDPOINT=http://{{ drone_rpc_server}}:{{drone_vault_plugin_host_port }}

{% endif %}
